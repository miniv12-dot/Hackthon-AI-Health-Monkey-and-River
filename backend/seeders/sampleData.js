const { User, Alert, DiagnosticTest } = require('../models');
const bcrypt = require('bcryptjs');

const seedSampleData = async () => {
  try {
    console.log('Starting database seeding...');

    // Create sample users
    const hashedPassword = await bcrypt.hash('password123', 12);
    
    const users = await User.bulkCreate([
      {
        name: 'John Doe',
        email: 'john.doe@example.com',
        password: hashedPassword,
        preferences: {
          notificationThreshold: 'medium',
          emailNotifications: true,
          theme: 'light',
          language: 'en'
        }
      },
      {
        name: 'Jane Smith',
        email: 'jane.smith@example.com',
        password: hashedPassword,
        preferences: {
          notificationThreshold: 'high',
          emailNotifications: false,
          theme: 'dark',
          language: 'en'
        }
      },
      {
        name: 'Dr. Michael Johnson',
        email: 'dr.johnson@example.com',
        password: hashedPassword,
        preferences: {
          notificationThreshold: 'low',
          emailNotifications: true,
          theme: 'light',
          language: 'en'
        }
      }
    ], { returning: true });

    console.log(`Created ${users.length} sample users`);

    // Create sample alerts
    const alerts = [];
    const alertTemplates = [
      {
        title: 'High Blood Pressure Alert',
        message: 'Your recent blood pressure reading is above normal range. Please consult your doctor.',
        priority: 'high',
        type: 'health',
        status: 'active'
      },
      {
        title: 'Medication Reminder',
        message: 'Time to take your daily medication.',
        priority: 'medium',
        type: 'reminder',
        status: 'active'
      },
      {
        title: 'Lab Results Available',
        message: 'Your recent lab test results are now available for review.',
        priority: 'medium',
        type: 'diagnostic',
        status: 'acknowledged'
      },
      {
        title: 'Appointment Scheduled',
        message: 'Your follow-up appointment has been scheduled for next week.',
        priority: 'low',
        type: 'general',
        status: 'resolved'
      },
      {
        title: 'Abnormal Heart Rate Detected',
        message: 'Your heart rate monitor detected an irregular pattern. Please review.',
        priority: 'critical',
        type: 'health',
        status: 'active'
      },
      {
        title: 'System Maintenance',
        message: 'The system will undergo maintenance tonight from 2-4 AM.',
        priority: 'low',
        type: 'system',
        status: 'dismissed'
      }
    ];

    for (const user of users) {
      for (let i = 0; i < alertTemplates.length; i++) {
        const template = alertTemplates[i];
        alerts.push({
          ...template,
          userId: user.id,
          metadata: {
            source: 'system',
            category: template.type,
            autoGenerated: true
          }
        });
      }
    }

    await Alert.bulkCreate(alerts);
    console.log(`Created ${alerts.length} sample alerts`);

    // Create sample diagnostic tests
    const diagnosticTests = [];
    const testTemplates = [
      {
        name: 'Complete Blood Count (CBC)',
        result: 'WBC: 7.2 K/uL, RBC: 4.5 M/uL, Hemoglobin: 14.2 g/dL, Hematocrit: 42.1%',
        testType: 'blood',
        normalRange: 'WBC: 4.0-11.0 K/uL, RBC: 4.2-5.4 M/uL, Hemoglobin: 12.0-16.0 g/dL',
        units: 'Various',
        isAbnormal: false,
        status: 'completed',
        doctorName: 'Dr. Sarah Wilson',
        labName: 'Central Medical Lab'
      },
      {
        name: 'Lipid Panel',
        result: 'Total Cholesterol: 245 mg/dL, LDL: 165 mg/dL, HDL: 38 mg/dL, Triglycerides: 210 mg/dL',
        testType: 'blood',
        normalRange: 'Total: <200 mg/dL, LDL: <100 mg/dL, HDL: >40 mg/dL, Triglycerides: <150 mg/dL',
        units: 'mg/dL',
        isAbnormal: true,
        status: 'reviewed',
        doctorName: 'Dr. Robert Chen',
        labName: 'HealthFirst Laboratory',
        notes: 'Elevated cholesterol levels. Recommend dietary changes and follow-up in 3 months.'
      },
      {
        name: 'Chest X-Ray',
        result: 'Clear lung fields, normal heart size, no acute findings',
        testType: 'imaging',
        normalRange: 'Normal chest anatomy',
        units: 'Qualitative',
        isAbnormal: false,
        status: 'completed',
        doctorName: 'Dr. Emily Rodriguez',
        labName: 'Radiology Associates'
      },
      {
        name: 'ECG (Electrocardiogram)',
        result: 'Normal sinus rhythm, rate 72 bpm, no ST changes',
        testType: 'cardiac',
        normalRange: '60-100 bpm, normal rhythm',
        units: 'bpm',
        isAbnormal: false,
        status: 'completed',
        doctorName: 'Dr. Michael Thompson',
        labName: 'Cardiac Care Center'
      },
      {
        name: 'Urinalysis',
        result: 'Protein: 2+, Glucose: Negative, Blood: Trace, Bacteria: Few',
        testType: 'urine',
        normalRange: 'Protein: Negative, Glucose: Negative, Blood: Negative',
        units: 'Qualitative',
        isAbnormal: true,
        status: 'pending',
        doctorName: 'Dr. Lisa Park',
        labName: 'Quick Lab Services',
        notes: 'Elevated protein levels detected. Recommend nephrology consultation.'
      },
      {
        name: 'Thyroid Function Test',
        result: 'TSH: 2.1 mIU/L, T4: 8.5 μg/dL, T3: 145 ng/dL',
        testType: 'blood',
        normalRange: 'TSH: 0.4-4.0 mIU/L, T4: 4.5-12.0 μg/dL, T3: 80-200 ng/dL',
        units: 'Various',
        isAbnormal: false,
        status: 'completed',
        doctorName: 'Dr. Amanda Foster',
        labName: 'Endocrine Lab'
      }
    ];

    // Generate tests for each user with different dates
    for (const user of users) {
      for (let i = 0; i < testTemplates.length; i++) {
        const template = testTemplates[i];
        const testDate = new Date();
        testDate.setDate(testDate.getDate() - Math.floor(Math.random() * 90)); // Random date within last 90 days
        
        diagnosticTests.push({
          ...template,
          date: testDate.toISOString().split('T')[0], // Format as YYYY-MM-DD
          userId: user.id
        });
      }
    }

    await DiagnosticTest.bulkCreate(diagnosticTests);
    console.log(`Created ${diagnosticTests.length} sample diagnostic tests`);

    console.log('Database seeding completed successfully!');
    console.log('\nSample login credentials:');
    console.log('Email: john.doe@example.com | Password: password123');
    console.log('Email: jane.smith@example.com | Password: password123');
    console.log('Email: dr.johnson@example.com | Password: password123');

  } catch (error) {
    console.error('Error seeding database:', error);
    throw error;
  }
};

// Run seeder if called directly
if (require.main === module) {
  const { sequelize } = require('../config/database');
  
  const runSeeder = async () => {
    try {
      await sequelize.authenticate();
      console.log('Database connection established.');
      
      // Sync database
      await sequelize.sync({ force: false });
      console.log('Database synchronized.');
      
      await seedSampleData();
      
      await sequelize.close();
      console.log('Database connection closed.');
      process.exit(0);
    } catch (error) {
      console.error('Seeder failed:', error);
      process.exit(1);
    }
  };
  
  runSeeder();
}

module.exports = { seedSampleData };
